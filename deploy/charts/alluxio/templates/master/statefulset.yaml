#
# The Alluxio Open Foundation licenses this work under the Apache License, version 2.0
# (the "License"). You may not use this work except in compliance with the License, which is
# available at www.apache.org/licenses/LICENSE-2.0
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied, as more fully set forth in the License.
#
# See the NOTICE file distributed with this work for information regarding copyright ownership.
#

{{- if .Values.master.enabled -}}

{{- $name := include "alluxio.name" . }}
{{- $fullName := include "alluxio.fullname" . }}
{{- $chart := include "alluxio.chart" . }}
{{- $isHa := gt (int .Values.master.count) 1 }}
{{- $alluxioJournalVolumeName := include "alluxio.getVolumeName" (dict "prefix" $fullName "component" "journal") }}
{{- $alluxioJournalDir := include "alluxio.mount.basePath" "/journal"}}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullName }}-master
  labels:
    name: {{ $fullName }}-master
    app: {{ $name }}
    chart: {{ $chart }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    role: alluxio-master
spec:
  selector:
    matchLabels:
      app: {{ $name }}
      role: alluxio-master
      name: {{ $fullName }}-master
  serviceName: {{ $fullName }}-master
  replicas: {{ int .Values.master.count }}
  template:
    metadata:
      labels:
        name: {{ $fullName }}-master
        app: {{ $name }}
        chart: {{ $chart }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        role: alluxio-master
      annotations:
      {{- if .Values.master.podAnnotations }}
{{- toYaml .Values.master.podAnnotations | nindent 8 }}
      {{- end }}
      {{- if and .Values.metrics.prometheusMetricsServlet.enabled .Values.metrics.prometheusMetricsServlet.podAnnotations }}
{{- toYaml .Values.metrics.prometheusMetricsServlet.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.hostAliases }}
{{- include "alluxio.hostAliases" . | nindent 6 }}
      {{- end }}
      hostNetwork: {{ .Values.hostNetwork }}
      dnsPolicy: {{ .Values.dnsPolicy | default (.Values.hostNetwork | ternary "ClusterFirstWithHostNet" "ClusterFirst") }}
      nodeSelector:
      {{- if .Values.master.nodeSelector }}
{{ toYaml .Values.master.nodeSelector | trim | indent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
{{ toYaml .Values.nodeSelector | trim | indent 8 }}
      {{- end }}
      affinity:
      {{- if .Values.master.affinity }}
{{- toYaml .Values.master.affinity | indent 8 }}
      {{- end }}
      tolerations:
      {{- if .Values.master.tolerations }}
{{ toYaml .Values.master.tolerations | trim | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
{{ toYaml .Values.tolerations | trim | indent 8 }}
      {{- end }}
      securityContext:
        runAsUser: {{ .Values.user }}
        runAsGroup: {{ .Values.group }}
        fsGroup: {{ .Values.fsGroup }}
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
{{ include "alluxio.imagePullSecrets" . | indent 6 }}
      {{- end}}
      initContainers:
      {{- if .Values.journal.runFormat}}
      - name: journal-format
        image: {{ .Values.image }}:{{ .Values.imageTag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command: ["alluxio","formatJournal"]
        volumeMounts:
          - name: {{ $alluxioJournalVolumeName }}
            mountPath: {{ $alluxioJournalDir }}
          - name: {{ $fullName }}-alluxio-conf
            mountPath: /opt/alluxio/conf
      {{- end}}
      containers:
        - name: alluxio-master
          image: {{ .Values.image }}:{{ .Values.imageTag }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- if .Values.master.resources }}
{{ include "alluxio.resources" .Values.master.resources | indent 10 }}
          {{- end }}
          command: ["tini", "--", "/entrypoint.sh"]
          args:
            - master-only
            - --no-format
          env:
            - name: ALLUXIO_MASTER_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- range $key, $value := .Values.master.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
            {{- end }}

{{- $probePort := $isHa | ternary "embedded" "rpc" }}
          readinessProbe:
            tcpSocket:
              port: {{ $probePort }}
            initialDelaySeconds: {{ .Values.master.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.master.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.master.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.master.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.master.readinessProbe.successThreshold }}
          livenessProbe:
            tcpSocket:
              port: {{ $probePort }}
            initialDelaySeconds: {{ .Values.master.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.master.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.master.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.master.livenessProbe.failureThreshold }}
          {{- if .Values.master.startupProbe }}
          startupProbe:
            tcpSocket:
              port: {{ $probePort }}
            initialDelaySeconds: {{ .Values.master.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.master.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.master.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.master.startupProbe.failureThreshold }}
          {{- end}}
          ports:
          - containerPort: {{ .Values.master.ports.rpc }}
            name: rpc
          - containerPort: {{ .Values.master.ports.web }}
            name: web
          {{- if $isHa }}
          - containerPort: {{ .Values.master.ports.embedded }}
            name: embedded
          {{- end }}
          volumeMounts:
            - name: {{ $fullName }}-alluxio-conf
              mountPath: /opt/alluxio/conf
            - name: {{ $alluxioJournalVolumeName }}
              mountPath: {{ $alluxioJournalDir }}
            {{- if .Values.secrets }}
{{- include "alluxio.volumeMounts" (dict "volumeMounts" .Values.secrets.master "readOnly" true) | indent 12 }}
            {{- end }}
            {{- if .Values.configMaps }}
{{- include "alluxio.volumeMounts" (dict "volumeMounts" .Values.configMaps.master "readOnly" true) | indent 12 }}
            {{- end }}
            {{- if .Values.pvcMounts }}
{{- include "alluxio.volumeMounts" (dict "volumeMounts" .Values.pvcMounts.master "readOnly" false) | indent 12 }}
            {{- end }}
      restartPolicy: Always
      volumes:
        - name: {{ $fullName }}-alluxio-conf
          configMap:
            name: {{ $fullName }}-alluxio-conf
        {{- if .Values.secrets }}
{{- include "alluxio.secretVolumes" .Values.secrets.master | indent 8 }}
        {{- end }}
        {{- if .Values.configMaps }}
{{- include "alluxio.configMapVolumes" .Values.configMaps.master | indent 8 }}
        {{- end }}
        {{- if .Values.pvcMounts }}
{{- include "alluxio.persistentVolumeClaims" .Values.pvcMounts.master | indent 8 }}
        {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: {{ $alluxioJournalVolumeName }}
      spec:
        storageClassName: {{ .Values.journal.storageClass }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.journal.size }}
{{- end }}
