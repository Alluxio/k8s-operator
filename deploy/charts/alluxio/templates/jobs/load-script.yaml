#
# The Alluxio Open Foundation licenses this work under the Apache License, version 2.0
# (the "License"). You may not use this work except in compliance with the License, which is
# available at www.apache.org/licenses/LICENSE-2.0
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied, as more fully set forth in the License.
#
# See the NOTICE file distributed with this work for information regarding copyright ownership.
#

{{- $name := include "alluxio.name" . }}
{{- $fullName := include "alluxio.fullname" . }}
{{- $chart := include "alluxio.chart" . }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $fullName }}-alluxio-load
  labels:
    name: {{ $fullName }}-alluxio-load
    app: {{ $name }}
    chart: {{ $chart }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  load.go: |-
    package main

    import (
        "context"
        "log"
        "os"
        "os/exec"
        "strings"
        "time"
    )

    func main() {
        if len(os.Args) != 2 {
            panic("Load command only takes one argument")
        }
        path := os.Args[1]
        cmd := exec.Command("/opt/alluxio/bin/alluxio", "fs", "load", path, "--submit")
        if _, err := cmd.Output(); err != nil {
            panic(err)
        }
        waitUntilLoadFinish(path)
    }

    func waitUntilLoadFinish(path string) {
        for range time.Tick(15 * time.Second) {
            func() {
                ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
                defer cancel()
                output, err := exec.CommandContext(ctx, "/opt/alluxio/bin/alluxio", "fs", "load", path, "--progress").CombinedOutput()
                if err != nil {
    	            log.Printf("Error checking load progress: %v", err.Error())
                } else {
                    log.Printf(string(output))
                    if strings.Contains(string(output), "SUCCEEDED") {
                        os.Exit(0)
                    } else if strings.Contains(string(output), "FAILED") {
                        os.Exit(1)
                    }
                }
            }()
        }
    }
